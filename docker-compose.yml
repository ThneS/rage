services:
  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production # 生产环境构建
    container_name: rage-backend
    restart: unless-stopped
    environment:
      - ENV_FILE=/app/.env
      - DATABASE_URL=sqlite:///./rage.db
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backend/.env:/app/.env:ro
      - backend_data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      milvus:
        condition: service_healthy
    networks:
      - rage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production # 生产环境构建
    container_name: rage-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - rage-network

  # Milvus 向量数据库 (Standalone 模式)
  milvus:
    image: milvusdb/milvus:v2.3.4
    container_name: rage-milvus
    restart: unless-stopped
    command: ["milvus", "run", "standalone"]
    environment:
      - ETCD_USE_EMBED=true
      - ETCD_DATA_DIR=/var/lib/milvus/etcd
      - COMMON_STORAGETYPE=local
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    networks:
      - rage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

volumes:
  backend_data:
  milvus_data:

networks:
  rage-network:
    driver: bridge
