version: "3.8"

services:
  # 后端服务
  backend:
    image: rage-backend:latest
    container_name: rage-backend-prod
    restart: unless-stopped
    environment:
      - ENV_FILE=/app/.env
      - DATABASE_URL=postgresql://rage:password@postgres:5432/rage_db
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
      - backend_data:/app/data
    depends_on:
      - postgres
      - redis
      - milvus
    networks:
      - rage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    image: rage-frontend:latest
    container_name: rage-frontend-prod
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - rage-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: rage-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - rage-network

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: rage-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=rage_db
      - POSTGRES_USER=rage
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - rage-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rage"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: rage-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - rage-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Milvus 向量数据库
  milvus:
    image: milvusdb/milvus:latest
    container_name: rage-milvus-prod
    restart: unless-stopped
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    depends_on:
      - etcd
      - minio
    networks:
      - rage-network

  # Milvus 依赖：etcd
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: rage-etcd-prod
    restart: unless-stopped
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - rage-network

  # Milvus 依赖：minio
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: rage-minio-prod
    restart: unless-stopped
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - minio_data:/data
    command: minio server /data
    networks:
      - rage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  backend_data:
  postgres_data:
  redis_data:
  milvus_data:
  etcd_data:
  minio_data:

networks:
  rage-network:
    driver: bridge
