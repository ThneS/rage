name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 测试
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 前端测试
      - name: Setup Node.js
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Test frontend
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm ci
          npm run type-check
          npm run lint
          npm test --if-present
          npm run build

      # 后端测试
      - name: Setup Python
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: backend/requirements.txt

      - name: Test backend
        if: matrix.component == 'backend'
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest mypy
          mypy app/ --ignore-missing-imports || true
          pytest tests/ -v || true

  # 构建镜像
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        run: |
          # 将仓库名转换为小写
          IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          # 设置镜像标签
          IMAGE_TAG=${{ github.sha }}
          IMAGE_NAME_LOWER=${{ steps.meta.outputs.image_name }}

          if [ "${{ matrix.component }}" = "backend" ]; then
            # 构建并推送后端镜像
            docker build -t ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}-backend:${IMAGE_TAG} ./backend
            docker push ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}-backend:${IMAGE_TAG}
          elif [ "${{ matrix.component }}" = "frontend" ]; then
            # 构建并推送前端镜像
            docker build -t ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}-frontend:${IMAGE_TAG} ./frontend
            docker push ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}-frontend:${IMAGE_TAG}
          fi

  # 部署
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to development
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "部署到开发环境"
          # 这里可以添加实际的部署命令
          # docker compose -f docker/docker-compose.dev.yml up -d

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "部署到生产环境"
          # 这里可以添加实际的部署命令
          # docker compose -f docker/docker-compose.prod.yml up -d
